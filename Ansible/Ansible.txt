•	Write a simple Ansible playbook
Sure, here's a simple Ansible playbook that demonstrates basic usage. This playbook will execute tasks on a group of servers defined in your Ansible inventory.
Example Ansible Playbook
Create a file named playbook.yml and paste the following content:
yaml
Copy code
---
- name: Simple Ansible Playbook
  hosts: all  # Targets all hosts defined in your inventory
  become: true  # Enables privilege escalation (sudo)

  tasks:
    - name: Ensure Nginx is installed
      apt:
        name: nginx
        state: present  # Ensures nginx is installed

    - name: Ensure Nginx service is running and enabled
      service:
        name: nginx
        state: started  # Ensures nginx service is started
        enabled: true   # Ensures nginx service starts on boot

    - name: Copy index.html to remote server
      copy:
        src: /path/to/local/index.html  # Local path to your index.html
        dest: /var/www/html/index.html  # Remote path to copy index.html
        owner: root
        group: root
        mode: '0644'  # Permissions for index.html

    - name: Restart Nginx service to apply changes
      service:
        name: nginx
        state: restarted  # Restarts nginx service if index.html changes
Explanation:
•	name: Descriptive name for the playbook or task.
•	hosts: Defines the group of hosts or specific hosts from your inventory that this playbook will target (all targets all hosts).
•	become: Enables privilege escalation. Tasks will be executed with sudo (root) privileges.
•	Tasks:
o	Ensure Nginx is installed: Uses the apt module to ensure Nginx is installed on the target servers.
o	Ensure Nginx service is running and enabled: Uses the service module to start and enable the Nginx service.
o	Copy index.html to remote server: Uses the copy module to copy a local index.html file to the remote server's /var/www/html/ directory.
o	Restart Nginx service to apply changes: Uses the service module to restart the Nginx service after copying index.html.
Running the Playbook:
To run the playbook:
1.	Ensure your Ansible inventory (/etc/ansible/hosts by default) includes the target servers or define them in your playbook using hosts.
2.	Execute the playbook using the ansible-playbook command:
bash
Copy code
ansible-playbook playbook.yml
3.	Ansible will execute each task sequentially on the defined hosts, installing Nginx (if not already installed), copying index.html, and restarting Nginx to apply changes.
This example demonstrates a basic playbook that installs Nginx, manages its service state, and copies a file to remote servers. Adjust paths, module options (apt, service, copy), and tasks as per your specific requirements and environment setup.
•	Write an Ansible playbook to configure an application server

To configure an application server using Ansible, you'll typically want to perform tasks such as installing necessary software, configuring services, deploying applications, and managing their lifecycle. Here’s an example Ansible playbook that outlines how to set up and configure an application server.
Example Ansible Playbook for Configuring an Application Server
Create a file named app_server_playbook.yml and paste the following content:
yaml
Copy code
---
- name: Configure Application Server
  hosts: app_servers  # Replace with your server group from inventory
  become: true  # Enable privilege escalation (sudo)

  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install Java JDK
      apt:
        name: openjdk-11-jdk
        state: present

    - name: Install Apache Tomcat
      apt:
        name: tomcat9
        state: present

    - name: Ensure Tomcat service is running and enabled
      service:
        name: tomcat9
        state: started
        enabled: yes

    - name: Deploy WAR file to Tomcat webapps directory
      copy:
        src: /path/to/your/app.war  # Local path to your application WAR file
        dest: /var/lib/tomcat9/webapps/app.war  # Destination on the server
        owner: tomcat
        group: tomcat
        mode: '0644'

    - name: Restart Tomcat service to deploy application
      service:
        name: tomcat9
        state: restarted

    - name: Ensure Tomcat HTTP port (8080) is open in firewall
      ufw:
        rule: allow
        port: 8080
        proto: tcp
        state: enabled
Explanation:
•	name: Descriptive name for the playbook or task.
•	hosts: Defines the group of hosts from your inventory that this playbook will target (app_servers should match a group in your inventory).
•	become: Enables privilege escalation. Tasks will be executed with sudo (root) privileges.
•	Tasks:
o	Update apt package cache: Ensures the package manager cache is up to date.
o	Install Java JDK: Installs OpenJDK 11 (adjust version as needed).
o	Install Apache Tomcat: Installs Tomcat 9.
o	Ensure Tomcat service is running and enabled: Starts Tomcat service and enables it to start on boot.
o	Deploy WAR file to Tomcat webapps directory: Copies your application's WAR file to Tomcat's webapps directory (/var/lib/tomcat9/webapps/).
o	Restart Tomcat service to deploy application: Restarts Tomcat to deploy the application.
o	Ensure Tomcat HTTP port (8080) is open in firewall: Uses ufw module to allow TCP traffic on port 8080 (adjust as per your application's requirements).
Running the Playbook:
To execute the playbook:
1.	Ensure your Ansible inventory (/etc/ansible/hosts by default) includes the app_servers group or adjust hosts to target specific hosts.
2.	Run the playbook using the ansible-playbook command:
bash
Copy code
ansible-playbook app_server_playbook.yml
3.	Ansible will connect to the hosts in the app_servers group, execute each task sequentially, and configure the application server according to the playbook instructions.
Notes:
•	Customization: Modify paths (src, dest), software versions (openjdk-11-jdk, tomcat9), and configurations (ufw rules) based on your specific requirements and environment setup.
•	Security: Ensure firewall rules (ufw) and access controls (owner, group, mode) are configured appropriately for your deployment.
•	Error Handling: Ansible provides detailed output and error messages during playbook execution, helping you debug and troubleshoot any issues that may arise.
This example playbook serves as a foundation for configuring an application server using Ansible. Adjust and expand upon it to suit your application deployment needs, such as adding database configurations, additional software installations, or integration with CI/CD pipelines.

